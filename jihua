#   encoding:gbk
__author__ = 'xixi'
__email__ = '865393462@qq.com'
__date__ = '2023-12-04'
__description__ = '网格策略'
__warning__ = '为保证策略的有效性，策略代码和框架请不要外传和发布网上，仅供自己研究和使用'

from collections import OrderedDict
from datetime import datetime, timedelta
import threading
import time
import os

""""
更新记录:
1、类型转换异常处理

"""

# 读取配置文件
# --------------------------------参数设置---------------------------------
# 读取配置文件
FILE_NAME = "513520.SH" # 必填
ACCOUNT_ID = "1399000167"
ACCOUNT_TYPE = "CREDIT" # 账户类型
"""
'FUTURE'：期货
'STOCK'：股票
'CREDIT'：信用
'HUGANGTONG'：沪港通
'SHENGANGTONG'：深港通
'STOCK_OPTION'：期权
"""

POLICY_TYPE = "PRICE" # 策略运行类型 (启动后不推荐修改)
"""
'GRID'：网格
'PRICE'：价格跟随
"""

STK_TYPE = "STOCK" # 股票类型
"""
'STOCK'：股票
'KZZ'：可转债
"""

UNPAIRED_TIMES_INTERVAL = 10000  # 调试 默认最大未配对次数（避免故障无限买卖）


trade_asset_dict = {
    "513520.SH": {
        "STOCK_CODE": "513520.SH",  # 沪深300 代码为  标的代码.市场代码  例如：510300.SH
        "SELL_BASE_PRICE": 1.374,  # 高抛基准价格 如果不填写就取昨日收盘价 填None就是不设置 取昨日收盘价
        "BUY_BASE_PRICE": 1.374,  # 低吸基准价格 如果不填写就取昨日收盘价 填None就是不设置 取昨日收盘价
        "UP_X_TO_SELL": 0.005,  # 上涨买入幅度 相对于基准价格
        "DOWN_Y_TO_BUY": 0.005,  # 下跌买入  相对于基准价格
        "STOCK_TARGET_VOLUME": None,  # 计划持有的股票量 初次建仓时，会按照这个数量买入，后续会根据策略进行调仓(整数)
        "STOCK_VOLUME_T0": 3800,  # 每次网格交易的股票量(整数)
        "STOCK_VOLUME_LOCK": 0,  # 锁定的股票量，锁定的股票量不会参与交易，只会参与计算持仓比例(整数) 不限制就填写0
        "UNPAIRED_BUY_TIMES": None,  # 未配对低吸买入次数（整数） 如果不填写（填None) 就是不受这个限制 当天有效
        "UNPAIRED_SELL_TIMES": None,  # 未配对高抛卖出次数（整数）  如果不填写 (填None) 就是不受这个限制 当天有效
        "TOP_DOWN_PCT_CHANGE": None,  # 高抛拐点 不设置 填None
        "BOTTOM_UP_PCT_CHANGE": None,  # 低吸拐点 不设置 填None
        "RUN_TRACK":[] # 运行轨迹
    }}

POSITION_HISTORY_OBJ = dict()  # 持仓信息
ORDER_STATUS_OBJ = dict()  # 委托回报信息
TICK_DATA_OBJ = dict()  # tick信息
TRADING_ASSET_OBJ = dict()
TRADE_TEMP = dict()
assure_contract_dict = dict()

# 委托单信息
COMMISS_INFO_DICT = dict()

# 最大值和最小值
MAX_MIN_DICT = dict()

user_param = {"OrderType": 1,
              "MaxOrderCount": 500,  # 最大下单次数
              'PlaceOrderInterval': 3600,  # 下撤单时间间隔
              "VolumeRate": 1,
              "SuperPriceRate": 0.0001
              }  # 下单参数

for stock_code in trade_asset_dict:
    TRADING_ASSET_OBJ[stock_code] = dict()
    TRADING_ASSET_OBJ[stock_code]["SELL_BASE_PRICE"] = trade_asset_dict[stock_code]["SELL_BASE_PRICE"]
    TRADING_ASSET_OBJ[stock_code]["BUY_BASE_PRICE"] = trade_asset_dict[stock_code]["BUY_BASE_PRICE"]
    TRADING_ASSET_OBJ[stock_code]["UP_X_TO_SELL"] = trade_asset_dict[stock_code]["UP_X_TO_SELL"]
    TRADING_ASSET_OBJ[stock_code]["DOWN_Y_TO_BUY"] = trade_asset_dict[stock_code]["DOWN_Y_TO_BUY"]
    TRADING_ASSET_OBJ[stock_code]["STOCK_TARGET_VOLUME"] = trade_asset_dict[stock_code]["STOCK_TARGET_VOLUME"]
    TRADING_ASSET_OBJ[stock_code]["STOCK_VOLUME_T0"] = trade_asset_dict[stock_code]["STOCK_VOLUME_T0"]
    TRADING_ASSET_OBJ[stock_code]["STOCK_VOLUME_LOCK"] = trade_asset_dict[stock_code]["STOCK_VOLUME_LOCK"]
    TRADING_ASSET_OBJ[stock_code]["UNPAIRED_BUY_TIMES"] = trade_asset_dict[stock_code]["UNPAIRED_BUY_TIMES"]
    TRADING_ASSET_OBJ[stock_code]["UNPAIRED_SELL_TIMES"] = trade_asset_dict[stock_code]["UNPAIRED_SELL_TIMES"]
    TRADING_ASSET_OBJ[stock_code]["TOP_DOWN_PCT_CHANGE"] = trade_asset_dict[stock_code]["TOP_DOWN_PCT_CHANGE"]
    TRADING_ASSET_OBJ[stock_code]["BOTTOM_UP_PCT_CHANGE"] = trade_asset_dict[stock_code]["BOTTOM_UP_PCT_CHANGE"]
    TRADING_ASSET_OBJ[stock_code]["RUN_TRACK"] = trade_asset_dict[stock_code]["RUN_TRACK"]
stock_ls = list(TRADING_ASSET_OBJ.keys())


def init(ContextInfo):
    ContextInfo.ACCOUNT_ID = ACCOUNT_ID
    ContextInfo.set_account(ACCOUNT_ID)
    acc_ls = get_trade_detail_data(ACCOUNT_ID, "CREDIT", "ACCOUNT")
    if not acc_ls:
        raise Exception("未查询到账户信息,请检查资金账户是否正确")
    now_dt = datetime.today().strftime("%Y-%m-%d")
    assure_contract = get_mkt_assure_contract_dict(ContextInfo)
    assure_contract_dict.update(assure_contract)
    # ContextInfo.run_time("grid_strategy", "{}nSecond".format(RUN_TIME_INTERVAL), "{} 09:30:00".format(now_dt))
    
    # 初始化委托单信息
    COMMISS_INFO_DICT.setdefault("stock_code", None)
    COMMISS_INFO_DICT.setdefault("commiss_price", None)
    COMMISS_INFO_DICT.setdefault("commiss_no", None)
    COMMISS_INFO_DICT.setdefault("commiss_vol", None)
    COMMISS_INFO_DICT.setdefault("commiss_type", None)

    # 初始化委托单信息
    MAX_MIN_DICT.setdefault("max_price", -1.0)
    MAX_MIN_DICT.setdefault("min_price", 10000.00)

    #初始化信息
    load_run_track_data()
    
    print("{}初始化成功".format(ACCOUNT_ID))


def get_mkt_assure_contract_dict(ContextInfo):
    """
    5.3.8. StkSubjects担保标的对象
    """
    obj_dict = dict()
    obj_list = get_assure_contract(ContextInfo.ACCOUNT_ID)
    for obj in obj_list:
        sec_id = obj.m_strInstrumentID + "." + obj.m_strExchangeID
        obj_dict[sec_id] = dict()
        obj_dict[sec_id]["fin_status"] = obj.m_eFinStatus  # 融资状态 48 //正常  49 //暂停   50 //作废
        obj_dict[sec_id]["assue_rate"] = obj.m_dAssureRatio  # 担保品折算比例
    return obj_dict


def is_not_trade_time():
    """
    判断是否是非交易时间
    """
    dt_time = datetime.now()
    hour = dt_time.hour
    minute = dt_time.minute
    if hour == 9 and minute <= 15:
        return 1
    if hour >= 15:
        return 3
    if hour == 11 and minute >= 30:
        return 1
    if hour == 12:
        return 1
    return 2


def handlebar(ContextInfo):
    # 不要删除这行代码
    grid_strategy(ContextInfo)
    pass


def grid_strategy(ContextInfo):
    
    status = is_not_trade_time()
    if status == 3:
        return
    if status == 1:
        return

    standard_count = 100
    if STK_TYPE == "STOCK":
        standard_count = 100
    elif STK_TYPE == "KZZ":
        standard_count = 10

    if not stock_ls:
        print("=============股票池为空==============")
    tick_info = ContextInfo.get_full_tick(stock_ls)
    for sec_id in stock_ls:
        ORDER_STATUS_OBJ.setdefault(sec_id, dict())
        ORDER_STATUS_OBJ[sec_id].setdefault("left_order_shares", 0)
        ORDER_STATUS_OBJ[sec_id].setdefault("deal_volume", [0])
        ORDER_STATUS_OBJ[sec_id].setdefault("order_id", list())
        ORDER_STATUS_OBJ[sec_id].setdefault("is_trading", False)
        TRADE_TEMP.setdefault(sec_id, dict())
        TRADE_TEMP[sec_id].setdefault("UNPAIRED_BUY_TIMES", 0)
        TRADE_TEMP[sec_id].setdefault("UNPAIRED_SELL_TIMES", 0)
        TRADE_TEMP[sec_id].setdefault("UNPAIRED_BUY_TIME", datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
        TRADE_TEMP[sec_id].setdefault("UNPAIRED_SELL_TIME", datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
        TRADE_TEMP[sec_id].setdefault("JUMP_HIGH_SELL_TIME", datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
        TRADE_TEMP[sec_id].setdefault("JUMP_LOW_BUY_TIME", datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
        TRADE_TEMP[sec_id].setdefault("BUY_BASE_PRICE", None)
        TRADE_TEMP[sec_id].setdefault("SELL_BASE_PRICE", None)
        TRADE_TEMP[sec_id].setdefault("RUN_TRACK", TRADING_ASSET_OBJ[sec_id]["RUN_TRACK"])
        sell_base_price = TRADING_ASSET_OBJ[sec_id]["SELL_BASE_PRICE"]
        buy_base_price = TRADING_ASSET_OBJ[sec_id]["BUY_BASE_PRICE"]
        
        # 基准价格为空时，取昨收价
        if not sell_base_price:
            sell_base_price = tick_info[sec_id]["lastClose"]
            print("代码:{},基准价格为空,取昨收价:{}".format(sec_id, sell_base_price))
        if TRADE_TEMP[sec_id]["SELL_BASE_PRICE"]:
            sell_base_price = TRADE_TEMP[sec_id]["SELL_BASE_PRICE"]
        else:
            TRADE_TEMP[sec_id]["SELL_BASE_PRICE"] = sell_base_price
        if TRADE_TEMP[sec_id]["BUY_BASE_PRICE"]:
            buy_base_price = TRADE_TEMP[sec_id]["BUY_BASE_PRICE"]
        else:
            TRADE_TEMP[sec_id]["BUY_BASE_PRICE"] = buy_base_price

        s_upper_x_to_sell = TRADING_ASSET_OBJ[sec_id]["UP_X_TO_SELL"]  # 上涨X%卖出
        s_down_y_to_buy = TRADING_ASSET_OBJ[sec_id]["DOWN_Y_TO_BUY"]  # 下跌Y%买入
        s_stock_target_vol = TRADING_ASSET_OBJ[sec_id]["STOCK_TARGET_VOLUME"]  # 目标持仓
        s_stock_volume_t0 = TRADING_ASSET_OBJ[sec_id]["STOCK_VOLUME_T0"]  #
        s_stock_volume_lock = TRADING_ASSET_OBJ[sec_id]["STOCK_VOLUME_LOCK"]  # 持仓锁定
        s_unpair_buy_times = TRADING_ASSET_OBJ[sec_id]["UNPAIRED_BUY_TIMES"]  # 未成对买入次数
        s_unpair_sell_times = TRADING_ASSET_OBJ[sec_id]["UNPAIRED_SELL_TIMES"]  # 未成对卖出次数
        if not s_unpair_buy_times:
            s_unpair_buy_times = UNPAIRED_TIMES_INTERVAL
        if not s_unpair_sell_times:
            s_unpair_sell_times = UNPAIRED_TIMES_INTERVAL
        s_top_down_pct_change = TRADING_ASSET_OBJ[sec_id]["TOP_DOWN_PCT_CHANGE"]  #
        s_bottom_up_pct_change = TRADING_ASSET_OBJ[sec_id]["BOTTOM_UP_PCT_CHANGE"]  #
        if not TICK_DATA_OBJ.get(sec_id):
            TICK_DATA_OBJ.setdefault(sec_id, OrderedDict())

        if (sec_id not in tick_info.keys()):
            print(f"未返回{sec_id}对应的行情数据......")
            print(tick_info.keys())
            return
        time_tag = tick_info[sec_id]["timetag"]  # 分钟时间戳
        last_price = tick_info[sec_id]["lastPrice"]  # 最新价
        open_price_today = tick_info[sec_id]["open"]  # 开盘价
        high = tick_info[sec_id]["high"]  # 最高价
        low = tick_info[sec_id]["low"]  # 最低价
        pre_close = tick_info[sec_id]["lastClose"]  # 昨收价
        volume = tick_info[sec_id]["volume"]  # 成交量
        ask_vol = tick_info[sec_id]["askVol"]  # 卖量
        ask_price = tick_info[sec_id]["askPrice"]  # 卖价
        bid_vol = tick_info[sec_id]["bidVol"]  # 买量
        bid_price = tick_info[sec_id]["bidPrice"]  # 买价

        if not TICK_DATA_OBJ[sec_id].get(time_tag):
            TICK_DATA_OBJ[sec_id][time_tag] = dict()
            TICK_DATA_OBJ[sec_id][time_tag]["last_price"] = last_price
            TICK_DATA_OBJ[sec_id][time_tag]["open"] = open_price_today
            TICK_DATA_OBJ[sec_id][time_tag]["pre_close"] = pre_close
            TICK_DATA_OBJ[sec_id][time_tag]["high"] = high
            TICK_DATA_OBJ[sec_id][time_tag]["low"] = low
            TICK_DATA_OBJ[sec_id][time_tag]["volume"] = volume
            TICK_DATA_OBJ[sec_id][time_tag]["ask_vol"] = ask_vol
            TICK_DATA_OBJ[sec_id][time_tag]["ask_price"] = ask_price
            TICK_DATA_OBJ[sec_id][time_tag]["bid_vol"] = bid_vol
            TICK_DATA_OBJ[sec_id][time_tag]["bid_price"] = bid_price
        if len(TICK_DATA_OBJ[sec_id]) < 2:
            #print(f"等待{sec_id}数据就绪...")
            continue

        update_price = TICK_DATA_OBJ[sec_id][list(TICK_DATA_OBJ[sec_id].keys())[-1]]["last_price"]
        open_price = TICK_DATA_OBJ[sec_id][list(TICK_DATA_OBJ[sec_id].keys())[-1]]["open"]
        pre_close_price = TICK_DATA_OBJ[sec_id][list(TICK_DATA_OBJ[sec_id].keys())[-1]]["pre_close"]
        
        if MAX_MIN_DICT["max_price"] < update_price:
            MAX_MIN_DICT["max_price"] = update_price

        if MAX_MIN_DICT["min_price"] > update_price:
            MAX_MIN_DICT["min_price"] = update_price
        
        high_price = MAX_MIN_DICT["max_price"]
        low_price = MAX_MIN_DICT["min_price"]
        
        if update_price == 0 or open_price == 0 or high_price == 0 or low_price == 0:
            print(f"update_price = {update_price}；open_price = {open_price}；high_price = {high_price}；low_price = {low_price}...")
            continue
        sell_price = float(sell_base_price) * (1 + s_upper_x_to_sell) # 高抛价格
        sell_price = round(sell_price, 3)
        buy_price = float(buy_base_price) * (1 - s_down_y_to_buy) # 低吸价格
        buy_price = round(buy_price, 3)
        if POSITION_HISTORY_OBJ.get(sec_id):
            total_volume = POSITION_HISTORY_OBJ[sec_id]["volume"]  # 总持仓
            can_use_volume = POSITION_HISTORY_OBJ[sec_id]["can_use_volume"]  # 可用持仓
            can_use_volume = int((min(total_volume- s_stock_volume_lock, can_use_volume)) // standard_count * standard_count)
            # 涨幅上穿X%卖出
            if ORDER_STATUS_OBJ[sec_id]["is_trading"] and "2" == COMMISS_INFO_DICT["commiss_type"]:
                pass
            elif not s_top_down_pct_change:
                if sell_price <= update_price:
                    # 上涨X%卖出
                    if times_limit(sec_id, "2") > s_unpair_sell_times:
                        print("代码:{},上涨X%卖出,未成对卖出次数超过{},不再卖出".format(sec_id, s_unpair_sell_times))
                        continue
                    sell_vol = int(min(s_stock_volume_t0, can_use_volume) // standard_count * standard_count)
                    if sell_vol <= 0:
                        print("代码:{},上涨X%卖出,可用持仓小于等于0,锁定股数{}不再卖出".format(sec_id, s_stock_volume_lock))
                        continue
                    if assure_contract_dict.get(sec_id):
                        if assure_contract_dict[sec_id]["fin_status"] == 48:
                            if need_cancel(ContextInfo, "2", sec_id):
                                return
                            order(sec_id, "2", sell_vol, sell_price)
                            algo_passorder(31, 1101, ACCOUNT_ID, sec_id, 11, sell_price, sell_vol, 'Trade', 2, '上涨X%卖出',
                                           user_param,
                                           ContextInfo)
                            print("代码:{},上涨X%卖出,卖券还款卖出数量:{}委托价格{}".format(sec_id, sell_vol,sell_price))
                        else:
                            if need_cancel(ContextInfo, "2", sec_id):
                                return
                            order(sec_id, "2", sell_vol, sell_price)
                            algo_passorder(34, 1101, ACCOUNT_ID, sec_id, 11, sell_price, sell_vol, 'Trade', 2, '上涨X%卖出', 
                                           user_param,
                                           ContextInfo)
                            print("代码:{},上涨X%卖出,委托信用账户卖出数量:{}委托价格{}".format(sec_id, sell_vol,sell_price))

            else:
                if sell_price <= update_price and update_price / high_price - 1 <= -s_top_down_pct_change:
                    # 上涨X%卖出
                    sell_price = update_price
                    if times_limit(sec_id, "2") > s_unpair_sell_times:
                        print("代码:{},上涨X%卖出,未成对卖出次数超过{},不再卖出".format(sec_id, s_unpair_sell_times))
                        continue
                    sell_vol = int(min(s_stock_volume_t0, can_use_volume) // 100 * 100)
                    if sell_vol <= 0:
                        print("代码:{},上涨X%卖出,可用持仓小于等于0,锁定股数{}不再卖出".format(sec_id,
                                                                                               s_stock_volume_lock))
                        continue
                    if assure_contract_dict[sec_id]["fin_status"] == 48:
                        if need_cancel(ContextInfo, "2", sec_id):
                            return
                        order(sec_id, "2", sell_vol, sell_price)
                        algo_passorder(31, 1101, ACCOUNT_ID, sec_id, 11, sell_price, sell_vol, 'Trade', 2, '上涨X%卖出',
                                       user_param,
                                       ContextInfo)
                        print("代码:{},上涨X%卖出,卖券还款卖出数量:{}委托价格{}".format(sec_id, sell_vol, sell_price))
                    else:
                        if need_cancel(ContextInfo, "2", sec_id):
                            return
                        order(sec_id, "2", sell_vol, sell_price)
                        algo_passorder(34, 1101, ACCOUNT_ID, sec_id, 11, sell_price, sell_vol, 'Trade', 2, '上涨X%卖出', user_param,
                                       ContextInfo)
                        print("代码:{},上涨X%卖出,信用委托卖出数量:{}委托价格{}".format(sec_id, sell_vol, sell_price))


            # 下跌Y%买入
            if ORDER_STATUS_OBJ[sec_id]["is_trading"] and "1" == COMMISS_INFO_DICT["commiss_type"]:
                pass
            elif not s_bottom_up_pct_change:
                if buy_price >= update_price:
                    # 下跌Y%买入
                    if times_limit(sec_id, "1") > s_unpair_buy_times:
                        print("代码:{},下跌Y%买入,未成对买入次数超过{},不再买入".format(sec_id, s_unpair_buy_times))
                        continue
                    buy_vol = s_stock_volume_t0
                    if assure_contract_dict[sec_id]["fin_status"] == 48:
                        if need_cancel(ContextInfo, "1", sec_id):
                            return
                        order(sec_id, "1", buy_vol, buy_price)
                        algo_passorder(27, 1101, ACCOUNT_ID, sec_id, 11, buy_price, buy_vol, 'Trade', 2, '下跌Y%买入',
                                       user_param, ContextInfo)
                        print("代码:{},下跌Y%买入,委托融资买入数量:{}委托价格{}".format(sec_id, buy_vol, buy_price))
                    else:
                        if need_cancel(ContextInfo, "1", sec_id):
                            return
                        order(sec_id, "1", buy_vol, buy_price)
                        algo_passorder(33, 1101, ACCOUNT_ID, sec_id, 11, buy_price, buy_vol, 'Trade', 2, '下跌Y%买入',
                                       user_param, ContextInfo)
                        print("代码:{},下跌Y%买入,委托信用买入数量:{}委托价格{}".format(sec_id, buy_vol, buy_price))


            else:
                if buy_price >= update_price and update_price / low_price - 1 > s_bottom_up_pct_change:
                    # 下跌Y%买入
                    buy_price = update_price
                    if times_limit(sec_id, "1") > s_unpair_buy_times:
                        print("代码:{},下跌Y%买入,未成对买入次数超过{},不再买入".format(sec_id, s_unpair_buy_times))
                        continue
                    buy_vol = s_stock_volume_t0
                    if assure_contract_dict[sec_id]["fin_status"] == 48:
                        if need_cancel(ContextInfo, "1", sec_id):
                            return
                        order(sec_id, "1", buy_vol, buy_price)
                        algo_passorder(27, 1101, ACCOUNT_ID, sec_id, 11, buy_price, buy_vol, 'Trade', 2, '下跌Y%买入',
                                       user_param, ContextInfo)
                        print("代码:{},下跌Y%买入,委托融资买入数量:{}委托价格{}".format(sec_id, buy_vol, buy_price))
                    else:
                        if need_cancel(ContextInfo, "1", sec_id):
                            return
                        order(sec_id, "1", buy_vol, buy_price)
                        algo_passorder(33, 1101, ACCOUNT_ID, sec_id, 11, buy_price, buy_vol, 'Trade', 2, '下跌Y%买入',
                                       user_param, ContextInfo)
                        print("代码:{},下跌Y%买入,委托信用买入数量:{}委托价格{}".format(sec_id, buy_vol, buy_price))


        else:

            # 下跌Y%买入
            if ORDER_STATUS_OBJ[sec_id]["is_trading"] and "1" == COMMISS_INFO_DICT["commiss_type"]:
                pass
            elif not s_bottom_up_pct_change:
                if buy_price >= update_price:
                    # 下跌Y%买入
                    if times_limit(sec_id, "1") > s_unpair_buy_times:
                        print("代码:{},下跌Y%买入,未成对买入次数超过{},不再买入".format(sec_id, s_unpair_buy_times))
                        continue
                    buy_vol = s_stock_volume_t0
                    if assure_contract_dict[sec_id]["fin_status"] == 48:
                        if need_cancel(ContextInfo, "1", sec_id):
                            return
                        order(sec_id, "1", buy_vol, buy_price)
                        algo_passorder(27, 1101, ACCOUNT_ID, sec_id, 11, buy_price, buy_vol, 'Trade', 2, '下跌Y%买入',
                                       user_param, ContextInfo)
                        print("代码:{},下跌Y%买入,委托融资买入数量:{}委托价格{}".format(sec_id, buy_vol, buy_price))
                    else:
                        if need_cancel(ContextInfo, "1", sec_id):
                            return
                        order(sec_id, "1", buy_vol, buy_price)
                        algo_passorder(33, 1101, ACCOUNT_ID, sec_id, 11, buy_price, buy_vol, 'Trade', 2, '下跌Y%买入',
                                       user_param, ContextInfo)
                        print("代码:{},下跌Y%买入,委托信用买入数量:{}委托价格{}".format(sec_id, buy_vol, buy_price))


            else:
                if buy_price >= update_price and update_price / low_price - 1 > s_bottom_up_pct_change:
                    # 下跌Y%买入
                    buy_price = update_price
                    if times_limit(sec_id, "1") > s_unpair_buy_times:
                        print("代码:{},下跌Y%买入,未成对买入次数超过{},不再买入".format(sec_id, s_unpair_buy_times))
                        continue
                    buy_vol = s_stock_volume_t0
                    if assure_contract_dict[sec_id]["fin_status"] == 48:
                        if need_cancel(ContextInfo, "1", sec_id):
                            return
                        order(sec_id, "1", buy_vol, buy_price)
                        algo_passorder(27, 1101, ACCOUNT_ID, sec_id, 11, buy_price, buy_vol, 'Trade', 2, '下跌Y%买入',
                                       user_param, ContextInfo)
                        print("代码:{},下跌Y%买入,委托融资买入数量:{}委托价格{}".format(sec_id, buy_vol, buy_price))
                    else:
                        if need_cancel(ContextInfo, "1", sec_id):
                            return
                        order(sec_id, "1", buy_vol, buy_price)
                        algo_passorder(33, 1101, ACCOUNT_ID, sec_id, 11, buy_price, buy_vol, 'Trade', 2, '下跌Y%买入',
                                       user_param, ContextInfo)
                        print("代码:{},下跌Y%买入,委托信用买入数量:{}委托价格{}".format(sec_id, buy_vol, buy_price))


# 已买 已卖 次数
def times_limit(sec_id, trade_type):
    if len(TRADE_TEMP[sec_id]["RUN_TRACK"]) > 0:
        dict_a = TRADE_TEMP[sec_id]["RUN_TRACK"][0]
        track_traded_type = dict_a["traded_type"]
        if trade_type == track_traded_type:
            return len(TRADE_TEMP[sec_id]["RUN_TRACK"])
        else:
            return 0
    else:
        return 0


# 是否需要撤单
def need_cancel(ContextInfo, trade_type, sec_id):
    if ORDER_STATUS_OBJ[sec_id]["is_trading"] and trade_type != COMMISS_INFO_DICT["commiss_type"]:
        cancel_comiss(ContextInfo)
        return True
    else:
        return False

# 撤单
def cancel_comiss(ContextInfo):
    
    # 是否可以撤单
    if COMMISS_INFO_DICT["commiss_no"] is None:
        print("cancel_comiss :: commiss_no == None")
        return
    can_cancel = can_cancel_order(COMMISS_INFO_DICT["commiss_no"], ACCOUNT_ID, ACCOUNT_TYPE)
    if can_cancel:
        print(f"撤单commiss_no = {COMMISS_INFO_DICT['commiss_no']}")
        cancel(COMMISS_INFO_DICT["commiss_no"], ACCOUNT_ID, ACCOUNT_TYPE, ContextInfo)


# 设置下单状态
def order(sec_id, trade_type, trade_amount, trade_price):
    ORDER_STATUS_OBJ[sec_id]["is_trading"] = True
    COMMISS_INFO_DICT["stock_code"] = sec_id
    COMMISS_INFO_DICT["commiss_vol"] = trade_amount
    COMMISS_INFO_DICT["commiss_type"] = trade_type
    COMMISS_INFO_DICT["commiss_price"] = round(trade_price, 3)

    MAX_MIN_DICT["max_price"] = -1.0
    MAX_MIN_DICT["min_price"] = 10000.00

# 取消下单状态
def cancel_order(sec_id):
    ORDER_STATUS_OBJ[sec_id]["is_trading"] = False
    COMMISS_INFO_DICT["stock_code"] = None
    COMMISS_INFO_DICT["commiss_vol"] = None
    COMMISS_INFO_DICT["commiss_type"] = None
    COMMISS_INFO_DICT["commiss_no"] = None
    COMMISS_INFO_DICT["commiss_price"] = None

# 委托主推函数
def order_callback(ContextInfo, orderInfo):
    """
        委托回报主推
        :param ContextInfo:
        :param orderInfo:
        :return:
    """
    order_id = orderInfo.m_strOrderSysID  # order_id
    order_status = orderInfo.m_nOrderStatus  # 委托状态
    order_opt_name = orderInfo.m_strOptName  # 买卖标记
    commiss_vol = orderInfo.m_nVolumeTotalOriginal # 委托数量
    deal_vol = orderInfo.m_nVolumeTraded  # 成交数量，已成交量 累计值
    left_order_shares = orderInfo.m_nVolumeTotal  # 委托剩余量，当前总委托量，股票的含义是总委托量减去成交量
    ex_cd = orderInfo.m_strExchangeID
    trade_price = orderInfo.m_dLimitPrice # 委托价格
    deal_price = orderInfo.m_dTradedPrice # 成交价格
    sec_id = orderInfo.m_strInstrumentID
    sec_id = "{}.{}".format(sec_id, ex_cd)
    print(f"order_callback委托回报主推执行 orderInfo.m_strOptName：{orderInfo.m_strOptName}")
    if (sec_id not in TRADING_ASSET_OBJ 
        or commiss_vol != COMMISS_INFO_DICT["commiss_vol"]
        or (order_opt_name.find('买') >= 0 and "2" == COMMISS_INFO_DICT["commiss_type"])
        or (order_opt_name.find('卖') >= 0 and "1" == COMMISS_INFO_DICT["commiss_type"])
        or not ORDER_STATUS_OBJ[sec_id]["is_trading"]):
        print(f"order_callback委托不是程序发出 sec_id：{sec_id};trade_price：{trade_price};commiss_vol：{commiss_vol};order_opt_name：{order_opt_name}")
        return

    if sec_id == COMMISS_INFO_DICT["stock_code"] and commiss_vol == COMMISS_INFO_DICT["commiss_vol"] and (((order_opt_name.find('买') >= 0 and "1" == COMMISS_INFO_DICT["commiss_type"])) or ((order_opt_name.find('卖') >= 0 and "2" == COMMISS_INFO_DICT["commiss_type"]))):
        COMMISS_INFO_DICT["commiss_no"] = order_id

    print(f'order_callback is_trading状态{ORDER_STATUS_OBJ[sec_id]["is_trading"]}')
    ORDER_STATUS_OBJ[sec_id]["left_order_shares"] = left_order_shares
    ORDER_STATUS_OBJ[sec_id]["deal_volume"].append(deal_vol)
    if order_id not in ORDER_STATUS_OBJ[sec_id]["order_id"]:
        ORDER_STATUS_OBJ[sec_id]["order_id"].append(order_id)

    if int(order_status) == 57:  # 废单
        ORDER_STATUS_OBJ[sec_id]["left_order_shares"] = 0
        cancel_order(sec_id)
        print("代码:{},委托状态码:57,废单".format(sec_id))

    elif int(order_status) == 54:  # 已撤
        ORDER_STATUS_OBJ[sec_id]["left_order_shares"] = 0
        cancel_order(sec_id)
        print("代码:{},委托状态码:54,剩余委托设置为0".format(sec_id))

    elif int(order_status) == 56 or int(order_status) == 53:  # 已成 部撤
        ORDER_STATUS_OBJ[sec_id]["order_id"].remove(order_id)

        # 更新买卖基准价格
        if TRADE_TEMP.get(sec_id):
            if order_opt_name.find('买') >= 0:
                base_price = TRADE_TEMP[sec_id]["BUY_BASE_PRICE"] * (1 - TRADING_ASSET_OBJ[stock_code]["DOWN_Y_TO_BUY"])
                base_price = round(base_price, 3)
                updata_run_track(sec_id, "1", trade_price, order_id, deal_vol, base_price, deal_price)
                set_buy_base_price(sec_id, base_price)
                set_sell_base_price(sec_id, base_price)
                print(f"高抛基准价{TRADE_TEMP[sec_id]['SELL_BASE_PRICE']} 低吸基准价{TRADE_TEMP[sec_id]['BUY_BASE_PRICE']}")
                print(TRADE_TEMP[sec_id]["RUN_TRACK"])
                rec_data(sec_id)
            
            elif order_opt_name.find('卖') >= 0:
                base_price = TRADE_TEMP[sec_id]["SELL_BASE_PRICE"] * (1 + TRADING_ASSET_OBJ[stock_code]["UP_X_TO_SELL"])
                base_price = round(base_price, 3)
                updata_run_track(sec_id, "2", trade_price, order_id, deal_vol, base_price, deal_price)
                set_sell_base_price(sec_id, base_price)
                set_buy_base_price(sec_id, base_price)
                print(f"高抛基准价{TRADE_TEMP[sec_id]['SELL_BASE_PRICE']} 低吸基准价{TRADE_TEMP[sec_id]['BUY_BASE_PRICE']}")
                print(TRADE_TEMP[sec_id]["RUN_TRACK"])
                rec_data(sec_id)
            else:
                print("未知交易类型:{},买卖标记:{}".format(sec_id, order_opt_name))
        cancel_order(sec_id)
        print("代码:{},委托状态码:{},剩余委托 0".format(sec_id, order_status))



# 读取运行轨迹
def load_run_track_data():
    file_path = FILE_NAME + '运行轨迹和基准价记录.txt'
    if os.path.exists(file_path):
        with open(file_path, 'r') as file:
            a = 0
            TRADE_TEMP.setdefault(stock_ls[0], dict())
            for line in file:
                if a == 1:
                    array = line.split()
                    TRADE_TEMP[stock_ls[0]]['SELL_BASE_PRICE'] = float(array[0][5:])
                    TRADE_TEMP[stock_ls[0]]['BUY_BASE_PRICE'] = float(array[1][5:])
                elif a == 2:
                    run_track_str = line.strip()
                    run_track = eval(run_track_str)
                    TRADE_TEMP[stock_ls[0]].setdefault("RUN_TRACK", run_track)
                a += 1
    else:
        pass
    print(f"load_run_track_data 执行完毕 {TRADE_TEMP}")


# 记录运行轨迹和基准价
def rec_data(sec_id):
    file = open(FILE_NAME + '运行轨迹和基准价记录.txt', 'w')
    base_price_updata = "高抛基准价{} 低吸基准价{}".format(TRADE_TEMP[sec_id]['SELL_BASE_PRICE'], TRADE_TEMP[sec_id]['BUY_BASE_PRICE'])
    run_track_str = str(TRADE_TEMP[sec_id]["RUN_TRACK"])
    time_str = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    file.write(time_str + ':写入数据\n' + base_price_updata + '\n' + run_track_str + "\n")
    file.close

# 更新运行轨迹
def updata_run_track(sec_id, trade_type, trade_price, order_id, deal_vol, base_price, deal_price):
    trade_rec = dict()
    trade_rec["traded_vol"] = deal_vol # 成交数量
    trade_rec["order_id"] = order_id # 委托编号
    trade_rec["trade_price"] = trade_price # 委托价格
    trade_rec["deal_price"] = deal_price # 成交价格
    trade_rec["base_price"] = base_price # 基准价格
    trade_rec["traded_type"] = trade_type # 委托类型
    
    a = len(TRADE_TEMP[sec_id]["RUN_TRACK"])
    print(f"RUN_TRACK 长度{a}")
    if len(TRADE_TEMP[sec_id]["RUN_TRACK"]) > 0:
        dict_a = TRADE_TEMP[sec_id]["RUN_TRACK"][0]
        track_traded_type = dict_a["traded_type"]
        print(f"trade_type   {trade_type}")
        if track_traded_type == trade_type:
            TRADE_TEMP[sec_id]["RUN_TRACK"].append(trade_rec)
        else:
            if "1" == track_traded_type:
                base_price = 10000
                for track in TRADE_TEMP[sec_id]["RUN_TRACK"]:
                    if POLICY_TYPE == "GRID":
                        if track["base_price"] < base_price:
                            base_price = track["base_price"]
                            trade_rec = track
                    else:
                        if track["deal_price"] < base_price:
                            base_price = track["deal_price"]
                            trade_rec = track
                TRADE_TEMP[sec_id]["RUN_TRACK"].remove(trade_rec)
            else:
                base_price = -1
                for track in TRADE_TEMP[sec_id]["RUN_TRACK"]:
                    if POLICY_TYPE == "GRID":
                        if track["base_price"] > base_price:
                            base_price = track["base_price"]
                            trade_rec = track
                    else:
                        if track["deal_price"] > base_price:
                            base_price = track["deal_price"]
                            trade_rec = track
                TRADE_TEMP[sec_id]["RUN_TRACK"].remove(trade_rec)
                
    else:
        TRADE_TEMP[sec_id]["RUN_TRACK"].append(trade_rec)

# 获取上一笔网格基准价
def get_last_base_price(track_traded_type, sec_id):
    trade_rec = dict()
    if "1" == track_traded_type:
        base_price = 10000
        for track in TRADE_TEMP[sec_id]["RUN_TRACK"]:
            if track["base_price"] < base_price:
                base_price = track["base_price"]
                trade_rec = track
    else:
        base_price = -1
        for track in TRADE_TEMP[sec_id]["RUN_TRACK"]:
            if track["base_price"] > base_price:
                base_price = track["base_price"]
                trade_rec = track
    return trade_rec["base_price"]

# 设置买入基准价
def set_buy_base_price(sec_id, base_price):
    if len(TRADE_TEMP[sec_id]["RUN_TRACK"]) > 0:
        track_dict = TRADE_TEMP[sec_id]["RUN_TRACK"][0]
        traded_type = track_dict["traded_type"]
        if "2" == traded_type:
            base_price = -1
            for track in TRADE_TEMP[sec_id]["RUN_TRACK"]:
                if POLICY_TYPE == "GRID":
                    if track["base_price"] > base_price:
                        base_price = track["base_price"]
                else:
                    if track["deal_price"] > base_price:
                        base_price = track["deal_price"]
                    
    TRADE_TEMP[sec_id]["BUY_BASE_PRICE"] = base_price


# 设置卖出基准价
def set_sell_base_price(sec_id, base_price):
    if len(TRADE_TEMP[sec_id]["RUN_TRACK"]) > 0:
        track_dict = TRADE_TEMP[sec_id]["RUN_TRACK"][0]
        traded_type = track_dict["traded_type"]
        if "1" == traded_type:
            base_price = 10000
            for track in TRADE_TEMP[sec_id]["RUN_TRACK"]:
                if POLICY_TYPE == "GRID":
                    if track["base_price"] < base_price:
                        base_price = track["base_price"]
                else:
                    if track["deal_price"] < base_price:
                        base_price = track["deal_price"]
    TRADE_TEMP[sec_id]["SELL_BASE_PRICE"] = base_price


# 成交主推函数
def deal_callback(ContextInfo, accountInfo):
    print('deal_callback')
    # 输出成交证券代码
    print(accountInfo.m_strInstrumentID)


# 持仓主推函数
def position_callback(ContextInfo, positionInfo):
    ex_cd = positionInfo.m_strExchangeID
    sec_id = positionInfo.m_strInstrumentID
    sec_id = "{}.{}".format(sec_id, ex_cd)
    can_use_volume = positionInfo.m_nCanUseVolume
    total_volume = positionInfo.m_nVolume
    froze_volume = positionInfo.m_nFrozenVolume
    print("持仓回报:股票代码:{},持仓:{}".format(sec_id, total_volume))
    if POSITION_HISTORY_OBJ.get(sec_id):
        POSITION_HISTORY_OBJ[sec_id]["volume"] = total_volume
        POSITION_HISTORY_OBJ[sec_id]["can_use_volume"] = can_use_volume
        POSITION_HISTORY_OBJ[sec_id]["froze_volume"] = froze_volume
    else:
        POSITION_HISTORY_OBJ[sec_id] = dict()
        POSITION_HISTORY_OBJ[sec_id]["volume"] = total_volume
        POSITION_HISTORY_OBJ[sec_id]["can_use_volume"] = can_use_volume
        POSITION_HISTORY_OBJ[sec_id]["froze_volume"] = froze_volume
